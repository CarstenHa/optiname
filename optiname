#!/bin/bash

# Carsten Jacob (https://github.com/CarstenHa/optiname)

usage() {
cat <<EOU

Skript zum (rekursiven) Optimieren von Datei- und Verzeichnisnamen.

Syntax: $(basename $0) [-d NUM] [-f NUM] [-h] [-n] [-v] [FILE|DIR]

Wenn ein Verzeichnis- bzw. Dateiname im letzten Argument angegeben wird, dann wird
diese Angabe verarbeitet.
Ansonsten werden alle Verzeichnisse/Dateien rekursiv ab PWD verarbeitet.

Optionen:

   -d NUM

	Anzahl der Zeichen in Verzeichnisnamen (Default-Wert: 64)

   -f NUM

	Anzahl der Zeichen in Dateinamen (Suffix nicht mitgerechnet; Default-Wert: 128)

   -h

	ruft diese Hilfe auf.

   -n

	Dry-run. Zeigt die Änderungen an, ohne die Dateien/Ordner tatsächlich umzubenennen.

   -v

	verbose

EOU
}

while getopts d:f:hnv opt
do 
 case $opt in
   d) dlength="$OPTARG"
      while [ -z "$(echo "$dlength" | grep -E ^[[:digit:]]+$)" ] || [ "$dlength" -lt 6 -o "$dlength" -gt 255 ]; do
       read -p "Bitte eine Zahl von 6 bis 255 eingeben: " dlength
      done
   ;;
   f) flength="$OPTARG"
      while [ -z "$(echo "$flength" | grep -E ^[[:digit:]]+$)" ] || [ "$flength" -lt 6 -o "$flength" -gt 255 ]; do
       read -p "Bitte eine Zahl von 6 bis 255 eingeben: " flength
      done
   ;;
   h) usage
      exit
   ;;
   n) export dryrun="yes"
      echo "***** DRY-RUN *****"
   ;;
   v) export verbosemodus="yes"
   ;;
 esac
done

# Möglicher Ordner-/Dateiname wird auf $1 gesetzt.
shift $(($OPTIND-1))
# Cache aktualisieren.
sync

sedscr() {
cat <<EOE
s/\[Üü]/ue/g
s/\[Ää]/ae/g
s/\[Öö]/oe/g
s/[[:space:]]\{1,\}/_/g
# Öffende Klammern werden umgeschrieben.
s/[[{]\{1,\}/(/g
# Schließende Klammern werden umgeschrieben.
s/[]}]\{1,\}/)/g
# Sonderzeichen in Dateinamen werden entfernt.
s/[#\/:;*?!•›"<>|$]\{1,\}/_/g
# Alle Großbuchstaben werden in Kleinbuchstaben umgewandelt.
s/\(.\)/\L\1/g
# Mögliche aufeinanderfolgende Unterstriche werden durch ein Unterstrich ersetzt.
s/[_]\{2,\}/_/g
EOE
}

[ -z "$(echo "$dlength" | grep -E ^[[:digit:]]+$)" ] && dlength="64"
[ -z "$(echo "$flength" | grep -E ^[[:digit:]]+$)" ] && flength="128"

# Funktion, um Dateinamen zu kürzen und umzubenennen
proc_file() {
  unset cutname

  # Argument, was dieser Funktion übergeben wurde (Pfad und Dateiname).
  local fpath="$1"
  local new_name
  local dir=$(dirname "$fpath")
  local filename=$(basename "$fpath")

  if [ "$dirproc" == "yes" ]; then
   local base="${filename}"
   local fsuffix=""
  elif [ "$dirproc" == "no" ]; then 
   local base="${filename%.*}"
   local fsuffix="${filename##*.}"
   # Eventuelle zusammengesetzte Dateiendung wird ermittelt.
   if [[ "$base" == *.* ]]; then
    local extsuffix="${base##*.}"
    if [[ "$extsuffix" =~ ^(tar|deb|rpm|cpio|jar|war|ear|img|vmdk|qcow2)$ ]]; then
     fsuffix="${extsuffix}.${fsuffix}"
     base="${base%.*}"
    fi
   fi
  fi
  local counter=1

  if [ "$fsuffix" != "$filename" -a -n "$fsuffix" ]; then
    fsuffix=".$fsuffix"
  else
    fsuffix=""
  fi

  # ** Name wird optimiert **
  base="$(echo "$base" | sed -f <(sedscr))"

  if [ "${#base}" -gt "$length" ]; then
   base="${base:0:$length}"
   cutname="yes"
  fi

  new_name="${base}${fsuffix}"

  # ** Diese while-Schleife ist ähnlich wie while-Schleife unten. Mögliche Änderungen abgleichen **
  # Schleife, um einen eindeutigen Namen zu ermitteln.
  while [ -e "$dir/$new_name" -a "$cutname" == "yes" ]; do
    # Länge des Dateinamens wird neu berechnet.
    seclength=$(("$length" - $((${#counter} + 1))))
    base="${base:0:$seclength}"
    # Wenn base mit einem _ endet, wird eine führende 0 hinzugefügt.
    if [ -n "$(echo "$base" | grep '_$')" ]; then
     new_name="${base}0${counter}${fsuffix}"
    else
     new_name="${base}_${counter}${fsuffix}"
    fi
    let counter++
  done

 # Hier werden die Namen ggf. geändert.
 # Die Option -n (mv) dient zur Sicherheit, damit niemals bestehende Dateien ungewollt überschrieben werden.

 if [ "$fpath" != "$dir/$new_name" ]; then

  if [ "$dryrun" == "yes" ]; then

   # ./ am Anfang müssen hier vorübergehend entfernt werden.
   tmpdirname="$(echo "${dir}" | sed 's/^[./]*//' | sed -f <(sedscr))"
   tmpnew_name="$(echo "${new_name}" | sed 's/^[./]*//' | sed -f <(sedscr))"
   [ -n  "${tmpdirname}" ] && tmpdirname=".../"

   # ** Diese while-Schleife ist ähnlich wie while-Schleife oben. Mögliche Änderungen abgleichen **
   # Wenn (tmp-)Dateinamen bereits vorhanden sind, durchnummerieren.
   # awk-Befehl, damit die Zeichen der kompletten Zeile als normale Zeichen interpretiert werden.
   while [ "$cutname" == "yes" ] && [ -e  "$dir/$new_name" -o -n "$(echo "$tmplist" | awk '$0 == "'"${dir}/${tmpnew_name}"'"')" ]; do
    # Länge des Dateinamens wird neu berechnet.
    seclength=$(("$length" - $((${#counter} + 1))))
    base="${base:0:$seclength}"
    # Wenn base mit einem _ endet, wird eine führende 0 hinzugefügt.
    if [ -n "$(echo "$base" | grep '_$')" ]; then
     tmpnew_name="${base}0${counter}${fsuffix}"
    else
     tmpnew_name="${base}_${counter}${fsuffix}"
    fi
    let counter++
   done

   printf "\e[31mDatei wird umbenannt\e[0m "
   echo "'$fpath' -> './${tmpdirname}${tmpnew_name}'"
   # Liste der mit dry-run "geänderten" Dateien/Ordner.
   tmplist+="${dir}/${tmpnew_name}"$'\n'
   # Zum debuggen
   #echo "$tmplist"

  else

   mv -vn "$fpath" "$dir/$new_name"

  fi

 else

  if [ "$verbosemodus" == "yes" ]; then

   if [ "$dryrun" == "yes" ]; then
    printf "\e[32mDatei          passt\e[0m "
    echo "'${fpath}'"
   else
    echo "Datei     passt '${fpath}'"
   fi

  fi

 fi
}

if [ -n "$1" ]; then

 singlename="$1"

 if [ -f "$singlename" ]; then
  echo "Datei wird geprüft ..."
  length="$flength"
  dirproc=no
  proc_file "$singlename"
 elif [ -d "$singlename" ]; then
  echo "Ordner wird geprüft ..."
  length="$dlength"
  dirproc=yes
  proc_file "$singlename"
 else
  echo "Kein(e) Datei/Ordner mit dem angegebenen Namen gefunden."
 fi

else

 # Alle Variablen und Funtionen die für den Subprozess bash -c ... bestimmt sind, müssen exportiert werden.
 export -f sedscr
 export -f proc_file
 export flength
 export dlength

 # Das zweite 'bash' in den find-Befehlen ist notwendig, damit die Shell die Position von {} korrekt zuordnen kann.
 # Ist nur als Platzhalter. Ohne diesen Platzhalter würde die Bash die Dateien als Parameter für die
 # Option -c interpretieren.

 # ** Ordner **
 echo "1. Ordner werden geprüft ..."
 # -mindepth 1 ist wichtig, damit . nicht ausgegeben wird.
 find . -depth -mindepth 1 -type d -exec bash -c '
 length="$dlength"
 dirproc=yes
 for filepath; do
   proc_file "$filepath"
 done
 ' bash {} +

 # ** Dateien **
 echo -e "\n2. Dateien werden geprüft ..."
 find $findopt -type f -exec bash -c '
 length="$flength"
 dirproc=no
 for filepath; do
   proc_file "$filepath"
 done
 ' bash {} +

fi
